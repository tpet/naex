<?xml version="1.0" encoding="UTF-8" ?>
<launch>
    <!--
    Slow down and filter input point clouds:
    points -> points_slow -> points_slow_filtered.

    Run adapters for TRADR and Husky:
    dynamic_point_cloud = points_slow
    os_cloud_node/points -> points_slow
    -->
    <arg name="robot" default="X1"/>
    <arg name="robot_type" default="x1"/>

    <arg name="points" default="points"/>
    <arg name="points_slow" default="$(arg points)_slow"/>
    <arg name="points_slow_freq" default="4.0"/>
    <arg name="points_slow_filtered" default="$(arg points_slow)_filtered"/>
    <arg name="points_min_dist" default="0.125"/>

    <!-- TRADR adaptor -->
    <node name="dynamic_point_cloud_relay" pkg="topic_tools" type="relay"
          args="dynamic_point_cloud $(arg points_slow)"
          respawn="true" respawn_delay="1.0" output="log"/>

    <!-- Husky adaptor -->
    <node name="os_points_throttle" pkg="topic_tools" type="throttle"
          args="messages os_cloud_node/points $(arg points_slow_freq) $(arg points_slow)"
          respawn="true" respawn_delay="1.0" output="log"/>

    <arg name="use_robot_box_filter" value="$(eval robot_type in {'dtr', 'jeanine', 'marmotte', 'marv'})"/>

    <node name="points_throttle" pkg="topic_tools" type="throttle"
          args="messages $(arg points) $(arg points_slow_freq) $(arg points_slow)"
          respawn="true" respawn_delay="1.0" output="log">
        <remap if="$(eval use_robot_box_filter)"
               from="$(arg points_slow)" to="$(arg points_slow)_pre"/>
    </node>

    <node if="$(eval use_robot_box_filter)"
          name="robot_box_filter" pkg="nodelet" type="nodelet"
          args="standalone cloud_proc/CropBoxImproved">
        <rosparam subst_value="true">
            min_z: 0.0
            negative: true
            keep_organized: true
        </rosparam>
        <rosparam if="$(eval robot_type == 'dtr')" subst_value="true">
            input_frame: $(arg robot)/base_footprint
            min_x: -0.475
            max_x: 0.475
            min_y: -0.3
            max_y: 0.3
            max_z: 0.8
            output_frame: $(arg robot)/encoder_rotating_link/gpu_lidar
        </rosparam>
        <rosparam if="$(eval robot_type == 'jeanine')" subst_value="true">
            min_x: -0.2
            max_x: 0.2
            min_y: -0.2
            max_y: 0.2
            min_z: -0.2
            max_z: 0.2
        </rosparam>
        <rosparam if="$(eval robot_type == 'marmotte')" subst_value="true">
            input_frame: $(arg robot)/base_footprint
            min_x: -0.475
            max_x: 0.475
            min_y: -0.3
            max_y: 0.3
            max_z: 0.8
            output_frame: $(arg robot)/sensor_rack/front_lidar
        </rosparam>
        <rosparam if="$(eval robot_type == 'marv')" subst_value="true">
            input_frame: $(arg robot)/base_footprint
            min_x: -0.5
            max_x: 0.5
            min_y: -0.4
            max_y: 0.4
            max_z: 0.6
            output_frame: $(arg robot)/laser/laser
        </rosparam>
        <remap from="~input" to="$(arg points_slow)_pre"/>
        <remap from="~output" to="$(arg points_slow)"/>
    </node>

    <node name="points_slow_voxels" pkg="nodelet" type="nodelet" args="standalone pcl/VoxelGrid" output="log">
        <rosparam subst_value="true">
            leaf_size: $(arg points_min_dist)
            filter_field_name: ""
        </rosparam>
        <remap from="~input" to="$(arg points_slow)"/>
        <remap from="~output" to="$(arg points_slow_filtered)"/>
    </node>

    <!-- SubT virtual EXPLORER_X1 RGBD sensors -->
    <group if="$(eval robot_type == 'explorer_x1')">
        <node name="front_rgbd_points_throttle" pkg="topic_tools" type="throttle"
              args="messages front_rgbd/points 1.0 front_rgbd/points_slow"
              respawn="true" respawn_delay="1.0" output="log"/>
        <node name="left_rgbd_points_throttle" pkg="topic_tools" type="throttle"
              args="messages left_rgbd/points 1.0 left_rgbd/points_slow"
              respawn="true" respawn_delay="1.0" output="log"/>
        <node name="right_rgbd_points_throttle" pkg="topic_tools" type="throttle"
              args="messages right_rgbd/points 1.0 right_rgbd/points_slow"
              respawn="true" respawn_delay="1.0" output="log"/>
        <node name="rear_rgbd_points_throttle" pkg="topic_tools" type="throttle"
              args="messages rear_rgbd/points 1.0 rear_rgbd/points_slow"
              respawn="true" respawn_delay="1.0" output="log"/>

        <node name="front_rgbd_points_voxels" pkg="nodelet" type="nodelet" args="standalone pcl/VoxelGrid" output="log">
            <rosparam subst_value="true">
                leaf_size: $(arg points_min_dist)
                filter_field_name: ""
            </rosparam>
            <remap from="~input" to="front_rgbd/points_slow"/>
            <remap from="~output" to="front_rgbd/points_slow_filtered"/>
        </node>
        <node name="left_rgbd_points_voxels" pkg="nodelet" type="nodelet" args="standalone pcl/VoxelGrid" output="log">
            <rosparam subst_value="true">
                leaf_size: $(arg points_min_dist)
                filter_field_name: ""
            </rosparam>
            <remap from="~input" to="left_rgbd/points_slow"/>
            <remap from="~output" to="left_rgbd/points_slow_filtered"/>
        </node>
        <node name="right_rgbd_points_voxels" pkg="nodelet" type="nodelet" args="standalone pcl/VoxelGrid" output="log">
            <rosparam subst_value="true">
                leaf_size: $(arg points_min_dist)
                filter_field_name: ""
            </rosparam>
            <remap from="~input" to="right_rgbd/points_slow"/>
            <remap from="~output" to="right_rgbd/points_slow_filtered"/>
        </node>
        <node name="rear_rgbd_points_voxels" pkg="nodelet" type="nodelet" args="standalone pcl/VoxelGrid" output="log">
            <rosparam subst_value="true">
                leaf_size: $(arg points_min_dist)
                filter_field_name: ""
            </rosparam>
            <remap from="~input" to="rear_rgbd/points_slow"/>
            <remap from="~output" to="rear_rgbd/points_slow_filtered"/>
        </node>
    </group>

    <!-- SubT virtual Jeanine RGBD sensor -->
    <group if="$(eval robot_type == 'jeanine')">
        <node name="rgbd_front_points_throttle" pkg="topic_tools" type="throttle"
              args="messages rgbd_front/points 1.0 rgbd_front/points_slow"
              respawn="true" respawn_delay="1.0" output="log"/>

            <node name="rgbd_front_points_voxels" pkg="nodelet" type="nodelet" args="standalone pcl/VoxelGrid" output="log">
                <rosparam subst_value="true">
                    leaf_size: $(arg points_min_dist)
                    filter_field_name: ""
                </rosparam>
                <remap from="~input" to="rgbd_front/points_slow"/>
                <remap from="~output" to="rgbd_front/points_slow_filtered"/>
            </node>
    </group>

    <!-- SMB lidar front sensor -->
    <group if="$(eval robot_type == 'smb')">
        <node name="lidar_front_points_throttle" pkg="topic_tools" type="throttle"
              args="messages lidar_front_points $(arg points_slow_freq) lidar_front_points_slow"
              respawn="true" respawn_delay="1.0" output="log"/>

            <node name="lidar_front_points_voxels" pkg="nodelet" type="nodelet" args="standalone pcl/VoxelGrid" output="log">
                <rosparam subst_value="true">
                    leaf_size: $(arg points_min_dist)
                    filter_field_name: ""
                </rosparam>
                <remap from="~input" to="lidar_front_points_slow"/>
                <remap from="~output" to="lidar_front_points_slow_filtered"/>
            </node>
    </group>
</launch>
